---
theme: gaia
_class: lead
paginate: true
backgroundColor: #fff
marp: false
backgroundImage: url('https://marp.app/assets/hero-background.jpg')
auto-scaling: true
---

# OS 2020 教学日历

Updated on Apr. 10, 2020

Dr. GuoJun LIU

---

## OS 01 -- 2020-04-01

- Introduction
  - 详见 chapter 0
- 网站课程介绍
- 网站实验介绍
  - Intel x86 读书笔记
  - Demo of Linux 0.00  
  - Demo of Linux 0.11
- 成绩介绍

---

## OS 02 -- 2020-04-03

- 计算机系统的发展
  - 视频，turing award 
- CPU
  - 抽象的寄存器
  - 如何寻址 PC-- CS：IP
- 内存
  - 层次架构 - 造价，容量，速度
  - 缓存，命中率，局部性原理
- 中断：定义，分类
  
---


## OS 03 -- 2020-04-08

- 中断的处理过程
  - 软硬件的分工
  - 中断中栈的保存
  - 中断向量表 -- 存储，查找，寄存器
- I/O 处理 - 优缺点比较
  - 轮询
  - 中断
  - DMA

---

### 操作系统功能简介

- OS definition
- 软硬件接口 
  - API，ABI，ISA
- OS本身也是程序
  - 意图不同
  - 掌控其他程序使用系统资源
  - 需要硬件收回控制权

---

## OS 04 -- 2020-04-10

### 操作系统的发展

从硬件发展的角度讲解OS的进化史，重点讲解如何演变出来的一些机制

- 序列处理
- 简单批处理系统
  - 内存保护 -- 8086 赌博机
  - 独占系统 -- 死循环或恶意独占
  - 特权指令 -- 恶意关机
  - 时钟中断 -- 如何打断防止独占
  
---

- 简单批处理系统
  - 需要引入的机制
    - `user mode` and `kernel mode`
    - 如何实现？举例：黑客攻击硬件和OS漏洞攻击伊朗核设施
    - 处理器需要知道谁在使用cpu，才能解决以上问题
    - 硬件处理上引入了什么？ 标志位 CS 特权级 
- 多道批处理
- 分时系统
  - 讲解实例，重申引入内存保护与特权级管理
- 简单解释 `Linux kernel` 要做的一些事情

---


## OS 05 -- 2020-04-15

### 进程的描述与控制

- 回顾并引出进程概念
- OS 为了控制进程，引出 `PCB` 的概念
  - `PCB` 的内容，结合 `Linux 0.11 TCB` 演示，`include\linux\sched.h` 
  - `Windows` 的任务管理器，展示统计的信息，这些都在 `PCB` 里
- 进程状态描述
  - 2 状态 -- 核心最大化使用 `CPU`，内存驻留的程序越多越好
  - 5 状态，细分的依据和不同阻塞事件队列优化
  - 7-8 状态，挂起态的引入 -- 内存是否足够大
  
---

## OS 06 -- 2020-04-17

回顾上讲进程状态

- 进程控制结构
  - 进程表，内存表，设备表，文件表，几个表之间的关联
  - 编程时，互相耦合更新的难度 
- 进程映像 `process image`
  - `PCB`，`stack`，`code`，`data`，`share space`
- 模式切换
  - 0x00 and 0x11，如何切换，什么时候切换
  
---

### Linux 0.00


- Bochs 简介
  - 下载与安装，安装注意事项，文件名没空格，加入系统路径
  - 帮助文档 `C:\Bochs\doc`
    - 如何编译 3.4, 调试命令 8.14 和 8.15
- `.bxrc` 配置文件 -- `debug gui`
- 命令行演示调试命令
  - 解释 `bochsdbg -q -f xxx.bxrc` 
- GUI界面演示调试命令
  - 机器码，内存，寄存器，`0x7C00`
  
---

## OS 07 -- 2020-04-22

### OS 引导 

- Linux 0.00 介绍
  - 文件如何编译链接生成，用 `hexdump` 查看二进制码，`0xAA55`
- BIOS 
  - 自检，加载启动盘第一扇区到 `0x7C00`, 中断加载到 `0x0`
- 查看寄存器，查看内存，`jmpi` 跳转隐式赋值
- 利用 `BIOS` `0x13` 中断加载 `head.s`
- 如何查找中断向量表进行中断调用
  
---

## OS 08 -- 2020-04-24

- `0x13` 中断
  - 结合第一章中断，把硬件和软件干的事情区分清楚
  - 栈在哪？压什么值？
  - 在 `0xf8f74` `iret`
- `lidt` `lgdt`
- `gdt` 描述符，在 `excel` 里用二进制展开，并解释每一项
  
---

## OS 09 -- 2020-04-29

- 解释同学问题，me
  - 结合第一章中断，把硬件和软件干的事情区分清楚
  - 栈在哪？压什么值？
  - 在 `0xf8f74` `iret`
- `lidt` `lgdt`
- `gdt` 描述符，在 `excel` 里用二进制展开，并解释每一项
  
---

## OS 11 -- 2020-05-06

- `jmpi 0,8`
- 解释描述符，如何跳转到 `head.s`
- 如何设置默认中断
  
---

## OS 12 -- 2020-05-08

- `head.s` 初始化部分
- 内核转到用户模式
- `int 0x80`
  - 模式切换，栈切换
  
---

## OS 13 -- 2020-05-13

- 回顾整个内核处理过程
- 讲解 `timer_interrupt` 
  - 模式切换
  - 任务切换
  - 系统调用
  - 不同返回机制
  - `TSS` `LDT`
  - 同一句跳转，可以跳到两个不同的地方，为什么？根据表里的值进行跳转
  
---

## OS 14 -- 2020-05-15

- 重新讲了一遍 `timer_interrupt` ，
  - 重点重述：模式切换、任务切换、系统调用、不同返回机制
  - 如何调试
  - 展现系统总所有表，完成整个底层体系结构在脑中完整的印象
- Linux 0.11 overview
  - `boot` 中的三个汇编文件到 `main` 函数之前的过程，如何生成 `Image`
  - 重点讲解了系统调用，以 `fork()` 函数举例
  
---

## OS 15 -- 2020-05-20

- 内存管理
- 分段
- 分页
- `buddy` 
- 如何放
  
---

## OS 16 -- 2020-05-22

- 虚拟内存管理
- 为什么要进行虚拟内存管理 
  - 虚拟的概念
  - 数学本质：映射
  - 关于映射的几个问题，核心页表的创建，维护，使用
  - 硬件相关机制， `CR3` 和 `CR2`
  - 地址换算并进行演示
  
---

## OS 17 -- 2020-05-27

- 重新讲了一遍段页式管理
- 重点重述：利用缓冲的加速机制，一次地址转换需要访问多次内存
  - 访问段表， `CS` 不变的情况下，寄存器的缓存里基地址值是不变的
  - 访问页表， `TLB` 加速页表访问
  - 访问内存， `cache` 加速访问内存
- 线程：进程和线程的区别，资源分配与调度执行
  - 加速：指令流水，进程并发，线程，不同级别上的并发操作 
  - 重点讲解了 `ULT` 和 `KLT` 
- 进行了上机小测，段表异常导致栈溢出，最后导致 `GDT` 表异常

---

## OS 18 -- 2020-05-29

- 精讲了测试
  - why 0x134 and why 0x136
  - when and where to stop
  - 压栈压到0x9A4，GDT表的第一项，CS=0x08，没有办法取指执行，reset
- 讲解了实验配置
  - 新版本的不同之处
  - 汇编级调试和C语言调试的不同
  - 演示gdb调试，如何看结构体等

---